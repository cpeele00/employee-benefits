/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/_app'
import { Route as IndexImport } from './routes/index'
import { Route as AppAppIndexImport } from './routes/_app/app/index'
import { Route as AppAppEmployeesIndexImport } from './routes/_app/app/employees/index'
import { Route as AppAppDependentsIndexImport } from './routes/_app/app/dependents/index'
import { Route as AppAppBenefitsIndexImport } from './routes/_app/app/benefits/index'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppAppIndexRoute = AppAppIndexImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => AppRoute,
} as any)

const AppAppEmployeesIndexRoute = AppAppEmployeesIndexImport.update({
  id: '/app/employees/',
  path: '/app/employees/',
  getParentRoute: () => AppRoute,
} as any)

const AppAppDependentsIndexRoute = AppAppDependentsIndexImport.update({
  id: '/app/dependents/',
  path: '/app/dependents/',
  getParentRoute: () => AppRoute,
} as any)

const AppAppBenefitsIndexRoute = AppAppBenefitsIndexImport.update({
  id: '/app/benefits/',
  path: '/app/benefits/',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_app/app/': {
      id: '/_app/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppAppIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/app/benefits/': {
      id: '/_app/app/benefits/'
      path: '/app/benefits'
      fullPath: '/app/benefits'
      preLoaderRoute: typeof AppAppBenefitsIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/app/dependents/': {
      id: '/_app/app/dependents/'
      path: '/app/dependents'
      fullPath: '/app/dependents'
      preLoaderRoute: typeof AppAppDependentsIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/app/employees/': {
      id: '/_app/app/employees/'
      path: '/app/employees'
      fullPath: '/app/employees'
      preLoaderRoute: typeof AppAppEmployeesIndexImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppAppIndexRoute: typeof AppAppIndexRoute
  AppAppBenefitsIndexRoute: typeof AppAppBenefitsIndexRoute
  AppAppDependentsIndexRoute: typeof AppAppDependentsIndexRoute
  AppAppEmployeesIndexRoute: typeof AppAppEmployeesIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppAppIndexRoute: AppAppIndexRoute,
  AppAppBenefitsIndexRoute: AppAppBenefitsIndexRoute,
  AppAppDependentsIndexRoute: AppAppDependentsIndexRoute,
  AppAppEmployeesIndexRoute: AppAppEmployeesIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/app': typeof AppAppIndexRoute
  '/app/benefits': typeof AppAppBenefitsIndexRoute
  '/app/dependents': typeof AppAppDependentsIndexRoute
  '/app/employees': typeof AppAppEmployeesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/app': typeof AppAppIndexRoute
  '/app/benefits': typeof AppAppBenefitsIndexRoute
  '/app/dependents': typeof AppAppDependentsIndexRoute
  '/app/employees': typeof AppAppEmployeesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/app/': typeof AppAppIndexRoute
  '/_app/app/benefits/': typeof AppAppBenefitsIndexRoute
  '/_app/app/dependents/': typeof AppAppDependentsIndexRoute
  '/_app/app/employees/': typeof AppAppEmployeesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/app'
    | '/app/benefits'
    | '/app/dependents'
    | '/app/employees'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/app' | '/app/benefits' | '/app/dependents' | '/app/employees'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_app/app/'
    | '/_app/app/benefits/'
    | '/_app/app/dependents/'
    | '/_app/app/employees/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/app/",
        "/_app/app/benefits/",
        "/_app/app/dependents/",
        "/_app/app/employees/"
      ]
    },
    "/_app/app/": {
      "filePath": "_app/app/index.tsx",
      "parent": "/_app"
    },
    "/_app/app/benefits/": {
      "filePath": "_app/app/benefits/index.tsx",
      "parent": "/_app"
    },
    "/_app/app/dependents/": {
      "filePath": "_app/app/dependents/index.tsx",
      "parent": "/_app"
    },
    "/_app/app/employees/": {
      "filePath": "_app/app/employees/index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
